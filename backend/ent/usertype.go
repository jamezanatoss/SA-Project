// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/james/app/ent/usertype"
)

// UserType is the model entity for the UserType schema.
type UserType struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UserTypeName holds the value of the "UserType_name" field.
	UserTypeName string `json:"UserType_name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserTypeQuery when eager-loading is set.
	Edges UserTypeEdges `json:"edges"`
}

// UserTypeEdges holds the relations/edges for other nodes in the graph.
type UserTypeEdges struct {
	// UserTypeID holds the value of the UserType_ID edge.
	UserTypeID []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// UserTypeIDOrErr returns the UserTypeID value or an error if the edge
// was not loaded in eager-loading.
func (e UserTypeEdges) UserTypeIDOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.UserTypeID, nil
	}
	return nil, &NotLoadedError{edge: "UserType_ID"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*UserType) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // UserType_name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the UserType fields.
func (ut *UserType) assignValues(values ...interface{}) error {
	if m, n := len(values), len(usertype.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	ut.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field UserType_name", values[0])
	} else if value.Valid {
		ut.UserTypeName = value.String
	}
	return nil
}

// QueryUserTypeID queries the UserType_ID edge of the UserType.
func (ut *UserType) QueryUserTypeID() *UserQuery {
	return (&UserTypeClient{config: ut.config}).QueryUserTypeID(ut)
}

// Update returns a builder for updating this UserType.
// Note that, you need to call UserType.Unwrap() before calling this method, if this UserType
// was returned from a transaction, and the transaction was committed or rolled back.
func (ut *UserType) Update() *UserTypeUpdateOne {
	return (&UserTypeClient{config: ut.config}).UpdateOne(ut)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (ut *UserType) Unwrap() *UserType {
	tx, ok := ut.config.driver.(*txDriver)
	if !ok {
		panic("ent: UserType is not a transactional entity")
	}
	ut.config.driver = tx.drv
	return ut
}

// String implements the fmt.Stringer.
func (ut *UserType) String() string {
	var builder strings.Builder
	builder.WriteString("UserType(")
	builder.WriteString(fmt.Sprintf("id=%v", ut.ID))
	builder.WriteString(", UserType_name=")
	builder.WriteString(ut.UserTypeName)
	builder.WriteByte(')')
	return builder.String()
}

// UserTypes is a parsable slice of UserType.
type UserTypes []*UserType

func (ut UserTypes) config(cfg config) {
	for _i := range ut {
		ut[_i].config = cfg
	}
}
