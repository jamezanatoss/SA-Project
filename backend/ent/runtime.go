// Code generated by entc, DO NOT EDIT.

package ent

import (
	"github.com/james/app/ent/gender"
	"github.com/james/app/ent/province"
	"github.com/james/app/ent/schema"
	"github.com/james/app/ent/user"
	"github.com/james/app/ent/usertype"
)

// The init function reads all schema descriptors with runtime
// code (default values, validators or hooks) and stitches it
// to their package variables.
func init() {
	genderFields := schema.Gender{}.Fields()
	_ = genderFields
	// genderDescGenderName is the schema descriptor for Gender_Name field.
	genderDescGenderName := genderFields[0].Descriptor()
	// gender.GenderNameValidator is a validator for the "Gender_Name" field. It is called by the builders before save.
	gender.GenderNameValidator = genderDescGenderName.Validators[0].(func(string) error)
	provinceFields := schema.Province{}.Fields()
	_ = provinceFields
	// provinceDescProvinceName is the schema descriptor for Province_Name field.
	provinceDescProvinceName := provinceFields[0].Descriptor()
	// province.ProvinceNameValidator is a validator for the "Province_Name" field. It is called by the builders before save.
	province.ProvinceNameValidator = provinceDescProvinceName.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescIdentityCard is the schema descriptor for Identity_card field.
	userDescIdentityCard := userFields[0].Descriptor()
	// user.IdentityCardValidator is a validator for the "Identity_card" field. It is called by the builders before save.
	user.IdentityCardValidator = userDescIdentityCard.Validators[0].(func(int) error)
	// userDescPassword is the schema descriptor for Password field.
	userDescPassword := userFields[1].Descriptor()
	// user.PasswordValidator is a validator for the "Password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescConfirmPassword is the schema descriptor for Confirm_password field.
	userDescConfirmPassword := userFields[2].Descriptor()
	// user.ConfirmPasswordValidator is a validator for the "Confirm_password" field. It is called by the builders before save.
	user.ConfirmPasswordValidator = userDescConfirmPassword.Validators[0].(func(string) error)
	// userDescFirstName is the schema descriptor for First_name field.
	userDescFirstName := userFields[3].Descriptor()
	// user.FirstNameValidator is a validator for the "First_name" field. It is called by the builders before save.
	user.FirstNameValidator = userDescFirstName.Validators[0].(func(string) error)
	// userDescLastName is the schema descriptor for Last_name field.
	userDescLastName := userFields[4].Descriptor()
	// user.LastNameValidator is a validator for the "Last_name" field. It is called by the builders before save.
	user.LastNameValidator = userDescLastName.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for Email field.
	userDescEmail := userFields[5].Descriptor()
	// user.EmailValidator is a validator for the "Email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescPhone is the schema descriptor for Phone field.
	userDescPhone := userFields[6].Descriptor()
	// user.PhoneValidator is a validator for the "Phone" field. It is called by the builders before save.
	user.PhoneValidator = userDescPhone.Validators[0].(func(int) error)
	// userDescDateOfBirth is the schema descriptor for Date_of_birth field.
	userDescDateOfBirth := userFields[7].Descriptor()
	// user.DateOfBirthValidator is a validator for the "Date_of_birth" field. It is called by the builders before save.
	user.DateOfBirthValidator = userDescDateOfBirth.Validators[0].(func(int) error)
	usertypeFields := schema.UserType{}.Fields()
	_ = usertypeFields
	// usertypeDescUserTypeName is the schema descriptor for UserType_name field.
	usertypeDescUserTypeName := usertypeFields[0].Descriptor()
	// usertype.UserTypeNameValidator is a validator for the "UserType_name" field. It is called by the builders before save.
	usertype.UserTypeNameValidator = usertypeDescUserTypeName.Validators[0].(func(string) error)
}
