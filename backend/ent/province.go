// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/james/app/ent/province"
)

// Province is the model entity for the Province schema.
type Province struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ProvinceName holds the value of the "Province_Name" field.
	ProvinceName string `json:"Province_Name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProvinceQuery when eager-loading is set.
	Edges ProvinceEdges `json:"edges"`
}

// ProvinceEdges holds the relations/edges for other nodes in the graph.
type ProvinceEdges struct {
	// ProvinceID holds the value of the Province_ID edge.
	ProvinceID []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ProvinceIDOrErr returns the ProvinceID value or an error if the edge
// was not loaded in eager-loading.
func (e ProvinceEdges) ProvinceIDOrErr() ([]*User, error) {
	if e.loadedTypes[0] {
		return e.ProvinceID, nil
	}
	return nil, &NotLoadedError{edge: "Province_ID"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Province) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // Province_Name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Province fields.
func (pr *Province) assignValues(values ...interface{}) error {
	if m, n := len(values), len(province.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field Province_Name", values[0])
	} else if value.Valid {
		pr.ProvinceName = value.String
	}
	return nil
}

// QueryProvinceID queries the Province_ID edge of the Province.
func (pr *Province) QueryProvinceID() *UserQuery {
	return (&ProvinceClient{config: pr.config}).QueryProvinceID(pr)
}

// Update returns a builder for updating this Province.
// Note that, you need to call Province.Unwrap() before calling this method, if this Province
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Province) Update() *ProvinceUpdateOne {
	return (&ProvinceClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Province) Unwrap() *Province {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Province is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Province) String() string {
	var builder strings.Builder
	builder.WriteString("Province(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", Province_Name=")
	builder.WriteString(pr.ProvinceName)
	builder.WriteByte(')')
	return builder.String()
}

// Provinces is a parsable slice of Province.
type Provinces []*Province

func (pr Provinces) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
