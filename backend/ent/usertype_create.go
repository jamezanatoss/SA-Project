// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/james/app/ent/user"
	"github.com/james/app/ent/usertype"
)

// UserTypeCreate is the builder for creating a UserType entity.
type UserTypeCreate struct {
	config
	mutation *UserTypeMutation
	hooks    []Hook
}

// SetUserTypeName sets the UserType_name field.
func (utc *UserTypeCreate) SetUserTypeName(s string) *UserTypeCreate {
	utc.mutation.SetUserTypeName(s)
	return utc
}

// AddUserTypeIDIDs adds the UserType_ID edge to User by ids.
func (utc *UserTypeCreate) AddUserTypeIDIDs(ids ...int) *UserTypeCreate {
	utc.mutation.AddUserTypeIDIDs(ids...)
	return utc
}

// AddUserTypeID adds the UserType_ID edges to User.
func (utc *UserTypeCreate) AddUserTypeID(u ...*User) *UserTypeCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return utc.AddUserTypeIDIDs(ids...)
}

// Mutation returns the UserTypeMutation object of the builder.
func (utc *UserTypeCreate) Mutation() *UserTypeMutation {
	return utc.mutation
}

// Save creates the UserType in the database.
func (utc *UserTypeCreate) Save(ctx context.Context) (*UserType, error) {
	if _, ok := utc.mutation.UserTypeName(); !ok {
		return nil, &ValidationError{Name: "UserType_name", err: errors.New("ent: missing required field \"UserType_name\"")}
	}
	if v, ok := utc.mutation.UserTypeName(); ok {
		if err := usertype.UserTypeNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "UserType_name", err: fmt.Errorf("ent: validator failed for field \"UserType_name\": %w", err)}
		}
	}
	var (
		err  error
		node *UserType
	)
	if len(utc.hooks) == 0 {
		node, err = utc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserTypeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			utc.mutation = mutation
			node, err = utc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(utc.hooks) - 1; i >= 0; i-- {
			mut = utc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, utc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (utc *UserTypeCreate) SaveX(ctx context.Context) *UserType {
	v, err := utc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (utc *UserTypeCreate) sqlSave(ctx context.Context) (*UserType, error) {
	ut, _spec := utc.createSpec()
	if err := sqlgraph.CreateNode(ctx, utc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	ut.ID = int(id)
	return ut, nil
}

func (utc *UserTypeCreate) createSpec() (*UserType, *sqlgraph.CreateSpec) {
	var (
		ut    = &UserType{config: utc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: usertype.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: usertype.FieldID,
			},
		}
	)
	if value, ok := utc.mutation.UserTypeName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: usertype.FieldUserTypeName,
		})
		ut.UserTypeName = value
	}
	if nodes := utc.mutation.UserTypeIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   usertype.UserTypeIDTable,
			Columns: []string{usertype.UserTypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return ut, _spec
}
