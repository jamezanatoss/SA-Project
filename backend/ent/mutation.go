// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"

	"github.com/james/app/ent/gender"
	"github.com/james/app/ent/province"
	"github.com/james/app/ent/user"
	"github.com/james/app/ent/usertype"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeGender   = "Gender"
	TypeProvince = "Province"
	TypeUser     = "User"
	TypeUserType = "UserType"
)

// GenderMutation represents an operation that mutate the Genders
// nodes in the graph.
type GenderMutation struct {
	config
	op                Op
	typ               string
	id                *int
	_Gender_Name      *string
	clearedFields     map[string]struct{}
	_Gender_ID        map[int]struct{}
	removed_Gender_ID map[int]struct{}
	done              bool
	oldValue          func(context.Context) (*Gender, error)
}

var _ ent.Mutation = (*GenderMutation)(nil)

// genderOption allows to manage the mutation configuration using functional options.
type genderOption func(*GenderMutation)

// newGenderMutation creates new mutation for $n.Name.
func newGenderMutation(c config, op Op, opts ...genderOption) *GenderMutation {
	m := &GenderMutation{
		config:        c,
		op:            op,
		typ:           TypeGender,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGenderID sets the id field of the mutation.
func withGenderID(id int) genderOption {
	return func(m *GenderMutation) {
		var (
			err   error
			once  sync.Once
			value *Gender
		)
		m.oldValue = func(ctx context.Context) (*Gender, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Gender.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGender sets the old Gender of the mutation.
func withGender(node *Gender) genderOption {
	return func(m *GenderMutation) {
		m.oldValue = func(context.Context) (*Gender, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GenderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GenderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *GenderMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetGenderName sets the Gender_Name field.
func (m *GenderMutation) SetGenderName(s string) {
	m._Gender_Name = &s
}

// GenderName returns the Gender_Name value in the mutation.
func (m *GenderMutation) GenderName() (r string, exists bool) {
	v := m._Gender_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldGenderName returns the old Gender_Name value of the Gender.
// If the Gender object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *GenderMutation) OldGenderName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldGenderName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldGenderName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGenderName: %w", err)
	}
	return oldValue.GenderName, nil
}

// ResetGenderName reset all changes of the "Gender_Name" field.
func (m *GenderMutation) ResetGenderName() {
	m._Gender_Name = nil
}

// AddGenderIDIDs adds the Gender_ID edge to User by ids.
func (m *GenderMutation) AddGenderIDIDs(ids ...int) {
	if m._Gender_ID == nil {
		m._Gender_ID = make(map[int]struct{})
	}
	for i := range ids {
		m._Gender_ID[ids[i]] = struct{}{}
	}
}

// RemoveGenderIDIDs removes the Gender_ID edge to User by ids.
func (m *GenderMutation) RemoveGenderIDIDs(ids ...int) {
	if m.removed_Gender_ID == nil {
		m.removed_Gender_ID = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Gender_ID[ids[i]] = struct{}{}
	}
}

// RemovedGenderID returns the removed ids of Gender_ID.
func (m *GenderMutation) RemovedGenderIDIDs() (ids []int) {
	for id := range m.removed_Gender_ID {
		ids = append(ids, id)
	}
	return
}

// GenderIDIDs returns the Gender_ID ids in the mutation.
func (m *GenderMutation) GenderIDIDs() (ids []int) {
	for id := range m._Gender_ID {
		ids = append(ids, id)
	}
	return
}

// ResetGenderID reset all changes of the "Gender_ID" edge.
func (m *GenderMutation) ResetGenderID() {
	m._Gender_ID = nil
	m.removed_Gender_ID = nil
}

// Op returns the operation name.
func (m *GenderMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Gender).
func (m *GenderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *GenderMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Gender_Name != nil {
		fields = append(fields, gender.FieldGenderName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *GenderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case gender.FieldGenderName:
		return m.GenderName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *GenderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case gender.FieldGenderName:
		return m.OldGenderName(ctx)
	}
	return nil, fmt.Errorf("unknown Gender field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case gender.FieldGenderName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGenderName(v)
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *GenderMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *GenderMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *GenderMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *GenderMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *GenderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *GenderMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Gender nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *GenderMutation) ResetField(name string) error {
	switch name {
	case gender.FieldGenderName:
		m.ResetGenderName()
		return nil
	}
	return fmt.Errorf("unknown Gender field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *GenderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Gender_ID != nil {
		edges = append(edges, gender.EdgeGenderID)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *GenderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgeGenderID:
		ids := make([]ent.Value, 0, len(m._Gender_ID))
		for id := range m._Gender_ID {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *GenderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Gender_ID != nil {
		edges = append(edges, gender.EdgeGenderID)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *GenderMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case gender.EdgeGenderID:
		ids := make([]ent.Value, 0, len(m.removed_Gender_ID))
		for id := range m.removed_Gender_ID {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *GenderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *GenderMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *GenderMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Gender unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *GenderMutation) ResetEdge(name string) error {
	switch name {
	case gender.EdgeGenderID:
		m.ResetGenderID()
		return nil
	}
	return fmt.Errorf("unknown Gender edge %s", name)
}

// ProvinceMutation represents an operation that mutate the Provinces
// nodes in the graph.
type ProvinceMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_Province_Name      *string
	clearedFields       map[string]struct{}
	_Province_ID        map[int]struct{}
	removed_Province_ID map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*Province, error)
}

var _ ent.Mutation = (*ProvinceMutation)(nil)

// provinceOption allows to manage the mutation configuration using functional options.
type provinceOption func(*ProvinceMutation)

// newProvinceMutation creates new mutation for $n.Name.
func newProvinceMutation(c config, op Op, opts ...provinceOption) *ProvinceMutation {
	m := &ProvinceMutation{
		config:        c,
		op:            op,
		typ:           TypeProvince,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProvinceID sets the id field of the mutation.
func withProvinceID(id int) provinceOption {
	return func(m *ProvinceMutation) {
		var (
			err   error
			once  sync.Once
			value *Province
		)
		m.oldValue = func(ctx context.Context) (*Province, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Province.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProvince sets the old Province of the mutation.
func withProvince(node *Province) provinceOption {
	return func(m *ProvinceMutation) {
		m.oldValue = func(context.Context) (*Province, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProvinceMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProvinceMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *ProvinceMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetProvinceName sets the Province_Name field.
func (m *ProvinceMutation) SetProvinceName(s string) {
	m._Province_Name = &s
}

// ProvinceName returns the Province_Name value in the mutation.
func (m *ProvinceMutation) ProvinceName() (r string, exists bool) {
	v := m._Province_Name
	if v == nil {
		return
	}
	return *v, true
}

// OldProvinceName returns the old Province_Name value of the Province.
// If the Province object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *ProvinceMutation) OldProvinceName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldProvinceName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldProvinceName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProvinceName: %w", err)
	}
	return oldValue.ProvinceName, nil
}

// ResetProvinceName reset all changes of the "Province_Name" field.
func (m *ProvinceMutation) ResetProvinceName() {
	m._Province_Name = nil
}

// AddProvinceIDIDs adds the Province_ID edge to User by ids.
func (m *ProvinceMutation) AddProvinceIDIDs(ids ...int) {
	if m._Province_ID == nil {
		m._Province_ID = make(map[int]struct{})
	}
	for i := range ids {
		m._Province_ID[ids[i]] = struct{}{}
	}
}

// RemoveProvinceIDIDs removes the Province_ID edge to User by ids.
func (m *ProvinceMutation) RemoveProvinceIDIDs(ids ...int) {
	if m.removed_Province_ID == nil {
		m.removed_Province_ID = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_Province_ID[ids[i]] = struct{}{}
	}
}

// RemovedProvinceID returns the removed ids of Province_ID.
func (m *ProvinceMutation) RemovedProvinceIDIDs() (ids []int) {
	for id := range m.removed_Province_ID {
		ids = append(ids, id)
	}
	return
}

// ProvinceIDIDs returns the Province_ID ids in the mutation.
func (m *ProvinceMutation) ProvinceIDIDs() (ids []int) {
	for id := range m._Province_ID {
		ids = append(ids, id)
	}
	return
}

// ResetProvinceID reset all changes of the "Province_ID" edge.
func (m *ProvinceMutation) ResetProvinceID() {
	m._Province_ID = nil
	m.removed_Province_ID = nil
}

// Op returns the operation name.
func (m *ProvinceMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Province).
func (m *ProvinceMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *ProvinceMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Province_Name != nil {
		fields = append(fields, province.FieldProvinceName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *ProvinceMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case province.FieldProvinceName:
		return m.ProvinceName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *ProvinceMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case province.FieldProvinceName:
		return m.OldProvinceName(ctx)
	}
	return nil, fmt.Errorf("unknown Province field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProvinceMutation) SetField(name string, value ent.Value) error {
	switch name {
	case province.FieldProvinceName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProvinceName(v)
		return nil
	}
	return fmt.Errorf("unknown Province field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *ProvinceMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *ProvinceMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *ProvinceMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Province numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *ProvinceMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *ProvinceMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProvinceMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Province nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *ProvinceMutation) ResetField(name string) error {
	switch name {
	case province.FieldProvinceName:
		m.ResetProvinceName()
		return nil
	}
	return fmt.Errorf("unknown Province field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *ProvinceMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._Province_ID != nil {
		edges = append(edges, province.EdgeProvinceID)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *ProvinceMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case province.EdgeProvinceID:
		ids := make([]ent.Value, 0, len(m._Province_ID))
		for id := range m._Province_ID {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *ProvinceMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_Province_ID != nil {
		edges = append(edges, province.EdgeProvinceID)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *ProvinceMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case province.EdgeProvinceID:
		ids := make([]ent.Value, 0, len(m.removed_Province_ID))
		for id := range m.removed_Province_ID {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *ProvinceMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *ProvinceMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *ProvinceMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Province unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *ProvinceMutation) ResetEdge(name string) error {
	switch name {
	case province.EdgeProvinceID:
		m.ResetProvinceID()
		return nil
	}
	return fmt.Errorf("unknown Province edge %s", name)
}

// UserMutation represents an operation that mutate the Users
// nodes in the graph.
type UserMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_Identity_card      *int
	add_Identity_card   *int
	_Password           *string
	_Confirm_password   *string
	_First_name         *string
	_Last_name          *string
	_Email              *string
	_Phone              *int
	add_Phone           *int
	_Date_of_birth      *int
	add_Date_of_birth   *int
	clearedFields       map[string]struct{}
	_Gender_ID          *int
	cleared_Gender_ID   bool
	_UserType_ID        *int
	cleared_UserType_ID bool
	_Province_ID        *int
	cleared_Province_ID bool
	done                bool
	oldValue            func(context.Context) (*User, error)
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows to manage the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for $n.Name.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the id field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetIdentityCard sets the Identity_card field.
func (m *UserMutation) SetIdentityCard(i int) {
	m._Identity_card = &i
	m.add_Identity_card = nil
}

// IdentityCard returns the Identity_card value in the mutation.
func (m *UserMutation) IdentityCard() (r int, exists bool) {
	v := m._Identity_card
	if v == nil {
		return
	}
	return *v, true
}

// OldIdentityCard returns the old Identity_card value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldIdentityCard(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldIdentityCard is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldIdentityCard requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIdentityCard: %w", err)
	}
	return oldValue.IdentityCard, nil
}

// AddIdentityCard adds i to Identity_card.
func (m *UserMutation) AddIdentityCard(i int) {
	if m.add_Identity_card != nil {
		*m.add_Identity_card += i
	} else {
		m.add_Identity_card = &i
	}
}

// AddedIdentityCard returns the value that was added to the Identity_card field in this mutation.
func (m *UserMutation) AddedIdentityCard() (r int, exists bool) {
	v := m.add_Identity_card
	if v == nil {
		return
	}
	return *v, true
}

// ResetIdentityCard reset all changes of the "Identity_card" field.
func (m *UserMutation) ResetIdentityCard() {
	m._Identity_card = nil
	m.add_Identity_card = nil
}

// SetPassword sets the Password field.
func (m *UserMutation) SetPassword(s string) {
	m._Password = &s
}

// Password returns the Password value in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m._Password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old Password value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword reset all changes of the "Password" field.
func (m *UserMutation) ResetPassword() {
	m._Password = nil
}

// SetConfirmPassword sets the Confirm_password field.
func (m *UserMutation) SetConfirmPassword(s string) {
	m._Confirm_password = &s
}

// ConfirmPassword returns the Confirm_password value in the mutation.
func (m *UserMutation) ConfirmPassword() (r string, exists bool) {
	v := m._Confirm_password
	if v == nil {
		return
	}
	return *v, true
}

// OldConfirmPassword returns the old Confirm_password value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldConfirmPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldConfirmPassword is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldConfirmPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConfirmPassword: %w", err)
	}
	return oldValue.ConfirmPassword, nil
}

// ResetConfirmPassword reset all changes of the "Confirm_password" field.
func (m *UserMutation) ResetConfirmPassword() {
	m._Confirm_password = nil
}

// SetFirstName sets the First_name field.
func (m *UserMutation) SetFirstName(s string) {
	m._First_name = &s
}

// FirstName returns the First_name value in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m._First_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old First_name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldFirstName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName reset all changes of the "First_name" field.
func (m *UserMutation) ResetFirstName() {
	m._First_name = nil
}

// SetLastName sets the Last_name field.
func (m *UserMutation) SetLastName(s string) {
	m._Last_name = &s
}

// LastName returns the Last_name value in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m._Last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old Last_name value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLastName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName reset all changes of the "Last_name" field.
func (m *UserMutation) ResetLastName() {
	m._Last_name = nil
}

// SetEmail sets the Email field.
func (m *UserMutation) SetEmail(s string) {
	m._Email = &s
}

// Email returns the Email value in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m._Email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old Email value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail reset all changes of the "Email" field.
func (m *UserMutation) ResetEmail() {
	m._Email = nil
}

// SetPhone sets the Phone field.
func (m *UserMutation) SetPhone(i int) {
	m._Phone = &i
	m.add_Phone = nil
}

// Phone returns the Phone value in the mutation.
func (m *UserMutation) Phone() (r int, exists bool) {
	v := m._Phone
	if v == nil {
		return
	}
	return *v, true
}

// OldPhone returns the old Phone value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldPhone(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPhone is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPhone: %w", err)
	}
	return oldValue.Phone, nil
}

// AddPhone adds i to Phone.
func (m *UserMutation) AddPhone(i int) {
	if m.add_Phone != nil {
		*m.add_Phone += i
	} else {
		m.add_Phone = &i
	}
}

// AddedPhone returns the value that was added to the Phone field in this mutation.
func (m *UserMutation) AddedPhone() (r int, exists bool) {
	v := m.add_Phone
	if v == nil {
		return
	}
	return *v, true
}

// ResetPhone reset all changes of the "Phone" field.
func (m *UserMutation) ResetPhone() {
	m._Phone = nil
	m.add_Phone = nil
}

// SetDateOfBirth sets the Date_of_birth field.
func (m *UserMutation) SetDateOfBirth(i int) {
	m._Date_of_birth = &i
	m.add_Date_of_birth = nil
}

// DateOfBirth returns the Date_of_birth value in the mutation.
func (m *UserMutation) DateOfBirth() (r int, exists bool) {
	v := m._Date_of_birth
	if v == nil {
		return
	}
	return *v, true
}

// OldDateOfBirth returns the old Date_of_birth value of the User.
// If the User object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserMutation) OldDateOfBirth(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDateOfBirth is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDateOfBirth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDateOfBirth: %w", err)
	}
	return oldValue.DateOfBirth, nil
}

// AddDateOfBirth adds i to Date_of_birth.
func (m *UserMutation) AddDateOfBirth(i int) {
	if m.add_Date_of_birth != nil {
		*m.add_Date_of_birth += i
	} else {
		m.add_Date_of_birth = &i
	}
}

// AddedDateOfBirth returns the value that was added to the Date_of_birth field in this mutation.
func (m *UserMutation) AddedDateOfBirth() (r int, exists bool) {
	v := m.add_Date_of_birth
	if v == nil {
		return
	}
	return *v, true
}

// ResetDateOfBirth reset all changes of the "Date_of_birth" field.
func (m *UserMutation) ResetDateOfBirth() {
	m._Date_of_birth = nil
	m.add_Date_of_birth = nil
}

// SetGenderIDID sets the Gender_ID edge to Gender by id.
func (m *UserMutation) SetGenderIDID(id int) {
	m._Gender_ID = &id
}

// ClearGenderID clears the Gender_ID edge to Gender.
func (m *UserMutation) ClearGenderID() {
	m.cleared_Gender_ID = true
}

// GenderIDCleared returns if the edge Gender_ID was cleared.
func (m *UserMutation) GenderIDCleared() bool {
	return m.cleared_Gender_ID
}

// GenderIDID returns the Gender_ID id in the mutation.
func (m *UserMutation) GenderIDID() (id int, exists bool) {
	if m._Gender_ID != nil {
		return *m._Gender_ID, true
	}
	return
}

// GenderIDIDs returns the Gender_ID ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// GenderIDID instead. It exists only for internal usage by the builders.
func (m *UserMutation) GenderIDIDs() (ids []int) {
	if id := m._Gender_ID; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGenderID reset all changes of the "Gender_ID" edge.
func (m *UserMutation) ResetGenderID() {
	m._Gender_ID = nil
	m.cleared_Gender_ID = false
}

// SetUserTypeIDID sets the UserType_ID edge to UserType by id.
func (m *UserMutation) SetUserTypeIDID(id int) {
	m._UserType_ID = &id
}

// ClearUserTypeID clears the UserType_ID edge to UserType.
func (m *UserMutation) ClearUserTypeID() {
	m.cleared_UserType_ID = true
}

// UserTypeIDCleared returns if the edge UserType_ID was cleared.
func (m *UserMutation) UserTypeIDCleared() bool {
	return m.cleared_UserType_ID
}

// UserTypeIDID returns the UserType_ID id in the mutation.
func (m *UserMutation) UserTypeIDID() (id int, exists bool) {
	if m._UserType_ID != nil {
		return *m._UserType_ID, true
	}
	return
}

// UserTypeIDIDs returns the UserType_ID ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// UserTypeIDID instead. It exists only for internal usage by the builders.
func (m *UserMutation) UserTypeIDIDs() (ids []int) {
	if id := m._UserType_ID; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUserTypeID reset all changes of the "UserType_ID" edge.
func (m *UserMutation) ResetUserTypeID() {
	m._UserType_ID = nil
	m.cleared_UserType_ID = false
}

// SetProvinceIDID sets the Province_ID edge to Province by id.
func (m *UserMutation) SetProvinceIDID(id int) {
	m._Province_ID = &id
}

// ClearProvinceID clears the Province_ID edge to Province.
func (m *UserMutation) ClearProvinceID() {
	m.cleared_Province_ID = true
}

// ProvinceIDCleared returns if the edge Province_ID was cleared.
func (m *UserMutation) ProvinceIDCleared() bool {
	return m.cleared_Province_ID
}

// ProvinceIDID returns the Province_ID id in the mutation.
func (m *UserMutation) ProvinceIDID() (id int, exists bool) {
	if m._Province_ID != nil {
		return *m._Province_ID, true
	}
	return
}

// ProvinceIDIDs returns the Province_ID ids in the mutation.
// Note that ids always returns len(ids) <= 1 for unique edges, and you should use
// ProvinceIDID instead. It exists only for internal usage by the builders.
func (m *UserMutation) ProvinceIDIDs() (ids []int) {
	if id := m._Province_ID; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetProvinceID reset all changes of the "Province_ID" edge.
func (m *UserMutation) ResetProvinceID() {
	m._Province_ID = nil
	m.cleared_Province_ID = false
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 8)
	if m._Identity_card != nil {
		fields = append(fields, user.FieldIdentityCard)
	}
	if m._Password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m._Confirm_password != nil {
		fields = append(fields, user.FieldConfirmPassword)
	}
	if m._First_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m._Last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m._Email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m._Phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m._Date_of_birth != nil {
		fields = append(fields, user.FieldDateOfBirth)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldIdentityCard:
		return m.IdentityCard()
	case user.FieldPassword:
		return m.Password()
	case user.FieldConfirmPassword:
		return m.ConfirmPassword()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldEmail:
		return m.Email()
	case user.FieldPhone:
		return m.Phone()
	case user.FieldDateOfBirth:
		return m.DateOfBirth()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldIdentityCard:
		return m.OldIdentityCard(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldConfirmPassword:
		return m.OldConfirmPassword(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldPhone:
		return m.OldPhone(ctx)
	case user.FieldDateOfBirth:
		return m.OldDateOfBirth(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldIdentityCard:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIdentityCard(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldConfirmPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConfirmPassword(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPhone(v)
		return nil
	case user.FieldDateOfBirth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDateOfBirth(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserMutation) AddedFields() []string {
	var fields []string
	if m.add_Identity_card != nil {
		fields = append(fields, user.FieldIdentityCard)
	}
	if m.add_Phone != nil {
		fields = append(fields, user.FieldPhone)
	}
	if m.add_Date_of_birth != nil {
		fields = append(fields, user.FieldDateOfBirth)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case user.FieldIdentityCard:
		return m.AddedIdentityCard()
	case user.FieldPhone:
		return m.AddedPhone()
	case user.FieldDateOfBirth:
		return m.AddedDateOfBirth()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	case user.FieldIdentityCard:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIdentityCard(v)
		return nil
	case user.FieldPhone:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPhone(v)
		return nil
	case user.FieldDateOfBirth:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDateOfBirth(v)
		return nil
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldIdentityCard:
		m.ResetIdentityCard()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldConfirmPassword:
		m.ResetConfirmPassword()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldPhone:
		m.ResetPhone()
		return nil
	case user.FieldDateOfBirth:
		m.ResetDateOfBirth()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m._Gender_ID != nil {
		edges = append(edges, user.EdgeGenderID)
	}
	if m._UserType_ID != nil {
		edges = append(edges, user.EdgeUserTypeID)
	}
	if m._Province_ID != nil {
		edges = append(edges, user.EdgeProvinceID)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeGenderID:
		if id := m._Gender_ID; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeUserTypeID:
		if id := m._UserType_ID; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeProvinceID:
		if id := m._Province_ID; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleared_Gender_ID {
		edges = append(edges, user.EdgeGenderID)
	}
	if m.cleared_UserType_ID {
		edges = append(edges, user.EdgeUserTypeID)
	}
	if m.cleared_Province_ID {
		edges = append(edges, user.EdgeProvinceID)
	}
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeGenderID:
		return m.cleared_Gender_ID
	case user.EdgeUserTypeID:
		return m.cleared_UserType_ID
	case user.EdgeProvinceID:
		return m.cleared_Province_ID
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeGenderID:
		m.ClearGenderID()
		return nil
	case user.EdgeUserTypeID:
		m.ClearUserTypeID()
		return nil
	case user.EdgeProvinceID:
		m.ClearProvinceID()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeGenderID:
		m.ResetGenderID()
		return nil
	case user.EdgeUserTypeID:
		m.ResetUserTypeID()
		return nil
	case user.EdgeProvinceID:
		m.ResetProvinceID()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserTypeMutation represents an operation that mutate the UserTypes
// nodes in the graph.
type UserTypeMutation struct {
	config
	op                  Op
	typ                 string
	id                  *int
	_UserType_name      *string
	clearedFields       map[string]struct{}
	_UserType_ID        map[int]struct{}
	removed_UserType_ID map[int]struct{}
	done                bool
	oldValue            func(context.Context) (*UserType, error)
}

var _ ent.Mutation = (*UserTypeMutation)(nil)

// usertypeOption allows to manage the mutation configuration using functional options.
type usertypeOption func(*UserTypeMutation)

// newUserTypeMutation creates new mutation for $n.Name.
func newUserTypeMutation(c config, op Op, opts ...usertypeOption) *UserTypeMutation {
	m := &UserTypeMutation{
		config:        c,
		op:            op,
		typ:           TypeUserType,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserTypeID sets the id field of the mutation.
func withUserTypeID(id int) usertypeOption {
	return func(m *UserTypeMutation) {
		var (
			err   error
			once  sync.Once
			value *UserType
		)
		m.oldValue = func(ctx context.Context) (*UserType, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserType.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserType sets the old UserType of the mutation.
func withUserType(node *UserType) usertypeOption {
	return func(m *UserTypeMutation) {
		m.oldValue = func(context.Context) (*UserType, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserTypeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserTypeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *UserTypeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetUserTypeName sets the UserType_name field.
func (m *UserTypeMutation) SetUserTypeName(s string) {
	m._UserType_name = &s
}

// UserTypeName returns the UserType_name value in the mutation.
func (m *UserTypeMutation) UserTypeName() (r string, exists bool) {
	v := m._UserType_name
	if v == nil {
		return
	}
	return *v, true
}

// OldUserTypeName returns the old UserType_name value of the UserType.
// If the UserType object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *UserTypeMutation) OldUserTypeName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUserTypeName is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUserTypeName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserTypeName: %w", err)
	}
	return oldValue.UserTypeName, nil
}

// ResetUserTypeName reset all changes of the "UserType_name" field.
func (m *UserTypeMutation) ResetUserTypeName() {
	m._UserType_name = nil
}

// AddUserTypeIDIDs adds the UserType_ID edge to User by ids.
func (m *UserTypeMutation) AddUserTypeIDIDs(ids ...int) {
	if m._UserType_ID == nil {
		m._UserType_ID = make(map[int]struct{})
	}
	for i := range ids {
		m._UserType_ID[ids[i]] = struct{}{}
	}
}

// RemoveUserTypeIDIDs removes the UserType_ID edge to User by ids.
func (m *UserTypeMutation) RemoveUserTypeIDIDs(ids ...int) {
	if m.removed_UserType_ID == nil {
		m.removed_UserType_ID = make(map[int]struct{})
	}
	for i := range ids {
		m.removed_UserType_ID[ids[i]] = struct{}{}
	}
}

// RemovedUserTypeID returns the removed ids of UserType_ID.
func (m *UserTypeMutation) RemovedUserTypeIDIDs() (ids []int) {
	for id := range m.removed_UserType_ID {
		ids = append(ids, id)
	}
	return
}

// UserTypeIDIDs returns the UserType_ID ids in the mutation.
func (m *UserTypeMutation) UserTypeIDIDs() (ids []int) {
	for id := range m._UserType_ID {
		ids = append(ids, id)
	}
	return
}

// ResetUserTypeID reset all changes of the "UserType_ID" edge.
func (m *UserTypeMutation) ResetUserTypeID() {
	m._UserType_ID = nil
	m.removed_UserType_ID = nil
}

// Op returns the operation name.
func (m *UserTypeMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (UserType).
func (m *UserTypeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *UserTypeMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._UserType_name != nil {
		fields = append(fields, usertype.FieldUserTypeName)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *UserTypeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usertype.FieldUserTypeName:
		return m.UserTypeName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *UserTypeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usertype.FieldUserTypeName:
		return m.OldUserTypeName(ctx)
	}
	return nil, fmt.Errorf("unknown UserType field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserTypeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usertype.FieldUserTypeName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserTypeName(v)
		return nil
	}
	return fmt.Errorf("unknown UserType field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *UserTypeMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *UserTypeMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *UserTypeMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserType numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *UserTypeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *UserTypeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserTypeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown UserType nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *UserTypeMutation) ResetField(name string) error {
	switch name {
	case usertype.FieldUserTypeName:
		m.ResetUserTypeName()
		return nil
	}
	return fmt.Errorf("unknown UserType field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *UserTypeMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m._UserType_ID != nil {
		edges = append(edges, usertype.EdgeUserTypeID)
	}
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *UserTypeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usertype.EdgeUserTypeID:
		ids := make([]ent.Value, 0, len(m._UserType_ID))
		for id := range m._UserType_ID {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *UserTypeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removed_UserType_ID != nil {
		edges = append(edges, usertype.EdgeUserTypeID)
	}
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *UserTypeMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case usertype.EdgeUserTypeID:
		ids := make([]ent.Value, 0, len(m.removed_UserType_ID))
		for id := range m.removed_UserType_ID {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *UserTypeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *UserTypeMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *UserTypeMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown UserType unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *UserTypeMutation) ResetEdge(name string) error {
	switch name {
	case usertype.EdgeUserTypeID:
		m.ResetUserTypeID()
		return nil
	}
	return fmt.Errorf("unknown UserType edge %s", name)
}
