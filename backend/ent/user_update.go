// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/james/app/ent/gender"
	"github.com/james/app/ent/predicate"
	"github.com/james/app/ent/province"
	"github.com/james/app/ent/user"
	"github.com/james/app/ent/usertype"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks      []Hook
	mutation   *UserMutation
	predicates []predicate.User
}

// Where adds a new predicate for the builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.predicates = append(uu.predicates, ps...)
	return uu
}

// SetIdentityCard sets the Identity_card field.
func (uu *UserUpdate) SetIdentityCard(i int) *UserUpdate {
	uu.mutation.ResetIdentityCard()
	uu.mutation.SetIdentityCard(i)
	return uu
}

// AddIdentityCard adds i to Identity_card.
func (uu *UserUpdate) AddIdentityCard(i int) *UserUpdate {
	uu.mutation.AddIdentityCard(i)
	return uu
}

// SetPassword sets the Password field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetConfirmPassword sets the Confirm_password field.
func (uu *UserUpdate) SetConfirmPassword(s string) *UserUpdate {
	uu.mutation.SetConfirmPassword(s)
	return uu
}

// SetFirstName sets the First_name field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetLastName sets the Last_name field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetEmail sets the Email field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetPhone sets the Phone field.
func (uu *UserUpdate) SetPhone(i int) *UserUpdate {
	uu.mutation.ResetPhone()
	uu.mutation.SetPhone(i)
	return uu
}

// AddPhone adds i to Phone.
func (uu *UserUpdate) AddPhone(i int) *UserUpdate {
	uu.mutation.AddPhone(i)
	return uu
}

// SetDateOfBirth sets the Date_of_birth field.
func (uu *UserUpdate) SetDateOfBirth(i int) *UserUpdate {
	uu.mutation.ResetDateOfBirth()
	uu.mutation.SetDateOfBirth(i)
	return uu
}

// AddDateOfBirth adds i to Date_of_birth.
func (uu *UserUpdate) AddDateOfBirth(i int) *UserUpdate {
	uu.mutation.AddDateOfBirth(i)
	return uu
}

// SetGenderIDID sets the Gender_ID edge to Gender by id.
func (uu *UserUpdate) SetGenderIDID(id int) *UserUpdate {
	uu.mutation.SetGenderIDID(id)
	return uu
}

// SetNillableGenderIDID sets the Gender_ID edge to Gender by id if the given value is not nil.
func (uu *UserUpdate) SetNillableGenderIDID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetGenderIDID(*id)
	}
	return uu
}

// SetGenderID sets the Gender_ID edge to Gender.
func (uu *UserUpdate) SetGenderID(g *Gender) *UserUpdate {
	return uu.SetGenderIDID(g.ID)
}

// SetUserTypeIDID sets the UserType_ID edge to UserType by id.
func (uu *UserUpdate) SetUserTypeIDID(id int) *UserUpdate {
	uu.mutation.SetUserTypeIDID(id)
	return uu
}

// SetNillableUserTypeIDID sets the UserType_ID edge to UserType by id if the given value is not nil.
func (uu *UserUpdate) SetNillableUserTypeIDID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetUserTypeIDID(*id)
	}
	return uu
}

// SetUserTypeID sets the UserType_ID edge to UserType.
func (uu *UserUpdate) SetUserTypeID(u *UserType) *UserUpdate {
	return uu.SetUserTypeIDID(u.ID)
}

// SetProvinceIDID sets the Province_ID edge to Province by id.
func (uu *UserUpdate) SetProvinceIDID(id int) *UserUpdate {
	uu.mutation.SetProvinceIDID(id)
	return uu
}

// SetNillableProvinceIDID sets the Province_ID edge to Province by id if the given value is not nil.
func (uu *UserUpdate) SetNillableProvinceIDID(id *int) *UserUpdate {
	if id != nil {
		uu = uu.SetProvinceIDID(*id)
	}
	return uu
}

// SetProvinceID sets the Province_ID edge to Province.
func (uu *UserUpdate) SetProvinceID(p *Province) *UserUpdate {
	return uu.SetProvinceIDID(p.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearGenderID clears the Gender_ID edge to Gender.
func (uu *UserUpdate) ClearGenderID() *UserUpdate {
	uu.mutation.ClearGenderID()
	return uu
}

// ClearUserTypeID clears the UserType_ID edge to UserType.
func (uu *UserUpdate) ClearUserTypeID() *UserUpdate {
	uu.mutation.ClearUserTypeID()
	return uu
}

// ClearProvinceID clears the Province_ID edge to Province.
func (uu *UserUpdate) ClearProvinceID() *UserUpdate {
	uu.mutation.ClearProvinceID()
	return uu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := uu.mutation.IdentityCard(); ok {
		if err := user.IdentityCardValidator(v); err != nil {
			return 0, &ValidationError{Name: "Identity_card", err: fmt.Errorf("ent: validator failed for field \"Identity_card\": %w", err)}
		}
	}
	if v, ok := uu.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return 0, &ValidationError{Name: "Password", err: fmt.Errorf("ent: validator failed for field \"Password\": %w", err)}
		}
	}
	if v, ok := uu.mutation.ConfirmPassword(); ok {
		if err := user.ConfirmPasswordValidator(v); err != nil {
			return 0, &ValidationError{Name: "Confirm_password", err: fmt.Errorf("ent: validator failed for field \"Confirm_password\": %w", err)}
		}
	}
	if v, ok := uu.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "First_name", err: fmt.Errorf("ent: validator failed for field \"First_name\": %w", err)}
		}
	}
	if v, ok := uu.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return 0, &ValidationError{Name: "Last_name", err: fmt.Errorf("ent: validator failed for field \"Last_name\": %w", err)}
		}
	}
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return 0, &ValidationError{Name: "Email", err: fmt.Errorf("ent: validator failed for field \"Email\": %w", err)}
		}
	}
	if v, ok := uu.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return 0, &ValidationError{Name: "Phone", err: fmt.Errorf("ent: validator failed for field \"Phone\": %w", err)}
		}
	}
	if v, ok := uu.mutation.DateOfBirth(); ok {
		if err := user.DateOfBirthValidator(v); err != nil {
			return 0, &ValidationError{Name: "Date_of_birth", err: fmt.Errorf("ent: validator failed for field \"Date_of_birth\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(uu.hooks) == 0 {
		affected, err = uu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uu.mutation = mutation
			affected, err = uu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(uu.hooks) - 1; i >= 0; i-- {
			mut = uu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	if ps := uu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uu.mutation.IdentityCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldIdentityCard,
		})
	}
	if value, ok := uu.mutation.AddedIdentityCard(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldIdentityCard,
		})
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uu.mutation.ConfirmPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldConfirmPassword,
		})
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldFirstName,
		})
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldLastName,
		})
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uu.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldPhone,
		})
	}
	if value, ok := uu.mutation.AddedPhone(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldPhone,
		})
	}
	if value, ok := uu.mutation.DateOfBirth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDateOfBirth,
		})
	}
	if value, ok := uu.mutation.AddedDateOfBirth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDateOfBirth,
		})
	}
	if uu.mutation.GenderIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.GenderIDTable,
			Columns: []string{user.GenderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GenderIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.GenderIDTable,
			Columns: []string{user.GenderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.UserTypeIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UserTypeIDTable,
			Columns: []string{user.UserTypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usertype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.UserTypeIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UserTypeIDTable,
			Columns: []string{user.UserTypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usertype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.ProvinceIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ProvinceIDTable,
			Columns: []string{user.ProvinceIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.ProvinceIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ProvinceIDTable,
			Columns: []string{user.ProvinceIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// SetIdentityCard sets the Identity_card field.
func (uuo *UserUpdateOne) SetIdentityCard(i int) *UserUpdateOne {
	uuo.mutation.ResetIdentityCard()
	uuo.mutation.SetIdentityCard(i)
	return uuo
}

// AddIdentityCard adds i to Identity_card.
func (uuo *UserUpdateOne) AddIdentityCard(i int) *UserUpdateOne {
	uuo.mutation.AddIdentityCard(i)
	return uuo
}

// SetPassword sets the Password field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetConfirmPassword sets the Confirm_password field.
func (uuo *UserUpdateOne) SetConfirmPassword(s string) *UserUpdateOne {
	uuo.mutation.SetConfirmPassword(s)
	return uuo
}

// SetFirstName sets the First_name field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetLastName sets the Last_name field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetEmail sets the Email field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetPhone sets the Phone field.
func (uuo *UserUpdateOne) SetPhone(i int) *UserUpdateOne {
	uuo.mutation.ResetPhone()
	uuo.mutation.SetPhone(i)
	return uuo
}

// AddPhone adds i to Phone.
func (uuo *UserUpdateOne) AddPhone(i int) *UserUpdateOne {
	uuo.mutation.AddPhone(i)
	return uuo
}

// SetDateOfBirth sets the Date_of_birth field.
func (uuo *UserUpdateOne) SetDateOfBirth(i int) *UserUpdateOne {
	uuo.mutation.ResetDateOfBirth()
	uuo.mutation.SetDateOfBirth(i)
	return uuo
}

// AddDateOfBirth adds i to Date_of_birth.
func (uuo *UserUpdateOne) AddDateOfBirth(i int) *UserUpdateOne {
	uuo.mutation.AddDateOfBirth(i)
	return uuo
}

// SetGenderIDID sets the Gender_ID edge to Gender by id.
func (uuo *UserUpdateOne) SetGenderIDID(id int) *UserUpdateOne {
	uuo.mutation.SetGenderIDID(id)
	return uuo
}

// SetNillableGenderIDID sets the Gender_ID edge to Gender by id if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableGenderIDID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetGenderIDID(*id)
	}
	return uuo
}

// SetGenderID sets the Gender_ID edge to Gender.
func (uuo *UserUpdateOne) SetGenderID(g *Gender) *UserUpdateOne {
	return uuo.SetGenderIDID(g.ID)
}

// SetUserTypeIDID sets the UserType_ID edge to UserType by id.
func (uuo *UserUpdateOne) SetUserTypeIDID(id int) *UserUpdateOne {
	uuo.mutation.SetUserTypeIDID(id)
	return uuo
}

// SetNillableUserTypeIDID sets the UserType_ID edge to UserType by id if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUserTypeIDID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetUserTypeIDID(*id)
	}
	return uuo
}

// SetUserTypeID sets the UserType_ID edge to UserType.
func (uuo *UserUpdateOne) SetUserTypeID(u *UserType) *UserUpdateOne {
	return uuo.SetUserTypeIDID(u.ID)
}

// SetProvinceIDID sets the Province_ID edge to Province by id.
func (uuo *UserUpdateOne) SetProvinceIDID(id int) *UserUpdateOne {
	uuo.mutation.SetProvinceIDID(id)
	return uuo
}

// SetNillableProvinceIDID sets the Province_ID edge to Province by id if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableProvinceIDID(id *int) *UserUpdateOne {
	if id != nil {
		uuo = uuo.SetProvinceIDID(*id)
	}
	return uuo
}

// SetProvinceID sets the Province_ID edge to Province.
func (uuo *UserUpdateOne) SetProvinceID(p *Province) *UserUpdateOne {
	return uuo.SetProvinceIDID(p.ID)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearGenderID clears the Gender_ID edge to Gender.
func (uuo *UserUpdateOne) ClearGenderID() *UserUpdateOne {
	uuo.mutation.ClearGenderID()
	return uuo
}

// ClearUserTypeID clears the UserType_ID edge to UserType.
func (uuo *UserUpdateOne) ClearUserTypeID() *UserUpdateOne {
	uuo.mutation.ClearUserTypeID()
	return uuo
}

// ClearProvinceID clears the Province_ID edge to Province.
func (uuo *UserUpdateOne) ClearProvinceID() *UserUpdateOne {
	uuo.mutation.ClearProvinceID()
	return uuo
}

// Save executes the query and returns the updated entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if v, ok := uuo.mutation.IdentityCard(); ok {
		if err := user.IdentityCardValidator(v); err != nil {
			return nil, &ValidationError{Name: "Identity_card", err: fmt.Errorf("ent: validator failed for field \"Identity_card\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.Password(); ok {
		if err := user.PasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "Password", err: fmt.Errorf("ent: validator failed for field \"Password\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.ConfirmPassword(); ok {
		if err := user.ConfirmPasswordValidator(v); err != nil {
			return nil, &ValidationError{Name: "Confirm_password", err: fmt.Errorf("ent: validator failed for field \"Confirm_password\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "First_name", err: fmt.Errorf("ent: validator failed for field \"First_name\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return nil, &ValidationError{Name: "Last_name", err: fmt.Errorf("ent: validator failed for field \"Last_name\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return nil, &ValidationError{Name: "Email", err: fmt.Errorf("ent: validator failed for field \"Email\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.Phone(); ok {
		if err := user.PhoneValidator(v); err != nil {
			return nil, &ValidationError{Name: "Phone", err: fmt.Errorf("ent: validator failed for field \"Phone\": %w", err)}
		}
	}
	if v, ok := uuo.mutation.DateOfBirth(); ok {
		if err := user.DateOfBirthValidator(v); err != nil {
			return nil, &ValidationError{Name: "Date_of_birth", err: fmt.Errorf("ent: validator failed for field \"Date_of_birth\": %w", err)}
		}
	}

	var (
		err  error
		node *User
	)
	if len(uuo.hooks) == 0 {
		node, err = uuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			uuo.mutation = mutation
			node, err = uuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(uuo.hooks) - 1; i >= 0; i-- {
			mut = uuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, uuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	u, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return u
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (u *User, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: user.FieldID,
			},
		},
	}
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing User.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := uuo.mutation.IdentityCard(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldIdentityCard,
		})
	}
	if value, ok := uuo.mutation.AddedIdentityCard(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldIdentityCard,
		})
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldPassword,
		})
	}
	if value, ok := uuo.mutation.ConfirmPassword(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldConfirmPassword,
		})
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldFirstName,
		})
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldLastName,
		})
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: user.FieldEmail,
		})
	}
	if value, ok := uuo.mutation.Phone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldPhone,
		})
	}
	if value, ok := uuo.mutation.AddedPhone(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldPhone,
		})
	}
	if value, ok := uuo.mutation.DateOfBirth(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDateOfBirth,
		})
	}
	if value, ok := uuo.mutation.AddedDateOfBirth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: user.FieldDateOfBirth,
		})
	}
	if uuo.mutation.GenderIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.GenderIDTable,
			Columns: []string{user.GenderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GenderIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.GenderIDTable,
			Columns: []string{user.GenderIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.UserTypeIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UserTypeIDTable,
			Columns: []string{user.UserTypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usertype.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.UserTypeIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.UserTypeIDTable,
			Columns: []string{user.UserTypeIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: usertype.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.ProvinceIDCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ProvinceIDTable,
			Columns: []string{user.ProvinceIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.ProvinceIDIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   user.ProvinceIDTable,
			Columns: []string{user.ProvinceIDColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	u = &User{config: uuo.config}
	_spec.Assign = u.assignValues
	_spec.ScanValues = u.scanValues()
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return u, nil
}
